#!/usr/bin/perl -w

# generate lib/Workout/Fit/Enum.pm
# takes FIT SDK Profile.xls as tab-separated input

use strict;
use warnings;

my $ltype;

# list of desired types that's populated
my %types = map { $_ => {} } qw/
	file
	mesg_num
	sport
	sub_sport
	intensity
	session_trigger
	autolap_trigger
	lap_trigger
	event
	event_type
	timer_trigger
	fitness_equipment_state
	manufacturer
	garmin_product
	antplus_device_type
	battery_status
	activity_type
	activity_subtype
/;

my $re_int = qr/^\d+$/;
my $re_sep = qr/\t/;

while(<>){
	chomp;
	my( $type, $base, $name, $value ) = split /$re_sep/;

	$type ||= $ltype;
	$ltype = $type;

	next unless $name;
	next unless exists $types{$type};
	next unless $value =~ /$re_int/;

	$types{$type}{lc $name} = $value;
}

print <<EOF;
#!/usr/bin/perl -w

# generated by $0 from FIT SDK Profile.xls

package Workout::Fit::Enum;
use strict;
use warnings;
use Exporter;

our( \@ISA, \@EXPORT );
BEGIN {
	\@ISA = qw( Exporter );
	\@EXPORT = ( qw(
EOF
foreach my $type ( sort { $a cmp $b } keys %types ){
	print "\t\tFIT_${type}\n",
		"\t\tFIT_${type}_id\n";
}
print <<EOF;
	) );
}

EOF
foreach my $type ( sort { $a cmp $b } keys %types ){
	print "our \%$type = (\n", (map {
			"	\"$_\" => $types{$type}{$_},\n";
		} sort {
			$types{$type}{$a} <=> $types{$type}{$b}
		} keys %{$types{$type}}), ");\n\n",
		"our \%${type}_id = reverse \%$type;\n\n",
		"sub FIT_${type} {\n",
		"\texists \$${type}\{\$_[0]} or return;\n",
		"\treturn \$${type}\{\$_[0]}\n",
		"}\n\n",
		"sub FIT_${type}_id {\n",
		"\texists \$${type}_id\{\$_[0]} or return;\n",
		"\treturn \$${type}_id\{\$_[0]}\n",
		"}\n\n";
}

print "1;\n";
