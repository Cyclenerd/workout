#!/usr/bin/perl -w

# TODO:
# - get parameters (bike, user) from DB
# - add data to DB

# graph:
# - speed/power/elevation over time/distance
# - energy/incline over time/distance
# - distance over time
# - power distribution

use strict;
use DateTime;
use Getopt::Long;
use Workout;
use Workout::Athlete;
use Workout::Calc;
use Workout::Store::Memory;
use Data::Dumper;

my $itype;
my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"help|h!"	=> \$wanthelp,
	"input|i=s"	=> \$itype,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <fname>
calculate some fancy data from Workout data
Options:
--input|-i=<type>   input file type
--help              this cruft
EOF
	exit 0;
}

my $fname = shift;
if( ! $fname ){
	print STDERR "missing input file\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}


my $ath = Workout::Athlete->new;
my $calc = Workout::Calc->new( { athlete => $ath });
my $src = Workout::file( $fname, { ftype => $itype, calc => $calc } );
my $mem = Workout::Store::Memory->new;
$mem->from( $src );
# TODO: smooth data

my $sdate = DateTime->from_epoch( 
	epoch		=> $mem->time_start,
	time_zone	=> 'local',
);
my $edate = DateTime->from_epoch(
	epoch		=> $mem->time_end,
	time_zone	=> 'local',
);

print 
"start time:      ", $sdate->datetime, "\n",
"end time:        ", $edate->datetime, "\n",
"duration:        ", DateTime->from_epoch( epoch => $mem->dur )->hms, " h\n",
"creeping:        ", DateTime->from_epoch( epoch => $mem->dur_creep )->hms, " h\n",
"moving:          ", DateTime->from_epoch( epoch => $mem->dur_mov )->hms, " h\n",
"start elevation: ", ($mem->ele_start ||"?"), " m\n",
"min elevation:   ", ($mem->ele_min ||"?"), " m\n",
"max elevation:   ", ($mem->ele_max ||"?"), " m\n",
"total incline:   ", ($mem->incline ||"?"), " m\n",
"total distance:  ", sprintf( "%.2f", ($mem->dist||0) / 1000), " km\n",
"max speed:       ", sprintf( "%.2f", ($mem->spd_max||0) * 3.6 ), " km/h\n",
"avg speed:       ", sprintf( "%.2f", ($mem->spd_avg||0) * 3.6 ), " km/h\n",
"total work:      ", sprintf( "%.2f", ($mem->work||0) / 1000 ), " kJ\n",
"avg Power:       ", sprintf( "%.2f", ($mem->pwr_avg||"?") ), " W\n",
"\n";

1;


