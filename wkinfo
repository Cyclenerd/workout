#!/usr/bin/perl -w

# TODO:
# - get parameters (bike, user) from DB
# - add data to DB
# - one-line output for tabular lists of several workouts

# graph:
# - speed/power/elevation over time/distance
# - energy/incline over time/distance
# - distance over time
# - power distribution

use strict;
use DateTime;
use Getopt::Long;
use Workout;
use Workout::Athlete;
use Workout::Calc;
use Workout::Store::Memory;
use Data::Dumper;

my $itype;
my $debug;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"debug!"	=> \$debug,
	"help|h!"	=> \$wanthelp,
	"input|i=s"	=> \$itype,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <fname>
calculate some fancy data from Workout data
Options:
--debug             enable debuging output
--input|-i=<type>   input file type
--help              this cruft
EOF
	exit 0;
}

my $fname = shift;
if( ! $fname ){
	print STDERR "missing input file\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}


my $ath = Workout::Athlete->new;
my $calc = Workout::Calc->new( { debug => $debug, athlete => $ath });
my $src = Workout::file_read( $fname, { 
	debug	=> $debug, 
	ftype	=> $itype, 
	calc	=> $calc,
} );
my $smth = Workout::filter( 'Smooth', $src, {
	debug	=> $debug,
	calc	=> $calc,
});
my $mem = Workout::Store::Memory->new;
$mem->from( $smth );

my $sdate = DateTime->from_epoch( 
	epoch		=> $mem->time_start,
	time_zone	=> 'local',
);
my $edate = DateTime->from_epoch(
	epoch		=> $mem->time_end,
	time_zone	=> 'local',
);

# TODO: zones/inzone, temperature
print 
"comment:         ", $src->note, "\n",
"chunks:          ", $smth->cntin, " (spdcut=", $smth->cntspd, " elecut=",
	$smth->cntele,")\n",
"start time:      ", $sdate->datetime, "\n",
"end time:        ", $edate->datetime, "\n",

"duration:        ", fmtdur( $mem->dur ), " h (", int($mem->dur/60), "m)\n",
"creeping:        ", fmtdur( $mem->dur_creep ), " h (", int($mem->dur_creep/60), "m)\n",
"moving:          ", fmtdur( $mem->dur_mov ), " h (", int($mem->dur_mov/60), "m)\n",

"Heartrate avg:   ", ($mem->hr_avg || '?'), " 1/min\n",
"Heartrate max:   ", ($mem->hr_max || '?'), " 1/min at ",
	fmttime($mem->hr_max_time), "\n",

"Cadence avg:     ", ($mem->cad_avg || '?'), " 1/s\n",
"Cadence max:     ", ($mem->cad_max || '?'), " 1/s at ",
	fmttime($mem->cad_max_time), "\n",

"start elevation: ", ($mem->ele_start ||'?'), " m\n",
"min elevation:   ", ($mem->ele_min ||'?'), " m\n",
"max elevation:   ", ($mem->ele_max ||'?'), " m at ",
	fmttime($mem->ele_max_time), "\n",
"max slope:       ", sprintf( '%.1f', ($mem->grad_max ||"0")), " % at ",
	fmttime($mem->grad_max_time), "\n",
"total incline:   ", ($mem->incline ||'?'), " m\n",

"total distance:  ", sprintf( '%.2f', ($mem->dist||0) / 1000), " km\n",

"max speed:       ", sprintf( '%.2f', ($mem->spd_max||0) * 3.6 ), " km/h at ",
	fmttime($mem->spd_max_time), "\n",
"avg speed:       ", sprintf( '%.2f', ($mem->spd_avg||0) * 3.6 ), " km/h\n",
"max accel:       ", sprintf( '%.2f', ($mem->accel_max||0) ), " m/s² at ",
	fmttime($mem->accel_max_time), "\n",

"total work:      ", sprintf( '%.2f', ($mem->work||0) / 1000 ), " kJ\n",
"avg Power:       ", sprintf( '%.2f', ($mem->pwr_avg||'?') ), " W\n",
"max Power:       ", sprintf( '%.2f', ($mem->pwr_max||'?') ), " W at ",
	fmttime($mem->pwr_max_time), "\n",
"\n";

1;

sub fmtdur {
	my $s = shift;
	my $m = int($s / 60); $s %= 60;
	my $h = int($m / 60); $m %= 60;
	sprintf('%d:%02d:%02d', $h, $m, $s);
}

sub fmttime {
	my $t = shift;
	return '?' unless $t;
	my $date = DateTime->from_epoch(
		epoch		=> $t,
		time_zone	=> 'local',
	);
	$date->hms;
}
