#!/usr/bin/perl -w
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#


# TODO: pod
# TODO: options for parameters (bike, user)
# TODO: one-line output for tabular lists of several workouts

use strict;
use DateTime;
use Getopt::Long;
use Workout;
use Workout::Store::Null;
use Workout::Athlete;

my $itype;
my $debug;
my $ftp;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"ftp=i"		=> \$ftp,
	"debug!"	=> \$debug,
	"help|h!"	=> \$wanthelp,
	"input|i=s"	=> \$itype,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <fname>
calculate some fancy data from Workout data
Options:
--debug             enable debuging output
--input|-i=<type>   input file type
--help              this cruft
EOF
	exit 0;
}

my $fname = shift;
if( ! $fname ){
	print STDERR "missing input file\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}

my $ath = Workout::Athlete->new;

my $src = Workout::file_read( $fname, { 
	debug	=> $debug, 
	ftype	=> $itype, 
} );
# TODO: filter Smooth
#my $smth = Workout::filter( 'Smooth', $src, {
#	debug	=> $debug,
#});
my $smth = $src;
my $pwr = Workout::filter( 'Pwr', $smth, { 
	debug	=> $debug,
	athlete => $ath,
});
my $info = Workout::filter( 'Info', $pwr, {
	debug	=> $debug,
});
my $finfo = Workout::filter( 'FTP', $info, {
	debug	=> $debug,
	ftp	=> $ftp||0,
});
my $null = Workout::Store::Null->new;
$null->from( $finfo );

if( $info->cntin == 0 ){
	print "file seems empty\n";
	exit;
}

my $sdate = DateTime->from_epoch( 
	epoch		=> $info->time_start,
	time_zone	=> 'local',
);
my $edate = DateTime->from_epoch(
	epoch		=> $info->time_end,
	time_zone	=> 'local',
);

# TODO: zones/inzone

foreach my $attr (qw( athletename note circum slope zeropos )){
	next unless $src->can( $attr );
	my $v = $src->$attr or next;

	printf "%-17s%s\n", $attr.':', $v;
}

print 
"chunks:          ", $src->chunk_count, " (", 
	sprintf('%.2f',$info->dur/$src->chunk_count), "s/chunk recint=", 
	$src->recint||0, ")\n",
"marker:          ", $src->mark_count, "\n",

# TODO: filter Smooth
#"chunks:          ", $smth->cntin, " (spdcut=", $smth->cntspd, " elecut=",
#	$smth->cntele,")\n",
"start time:      ", $sdate->datetime, "\n",
"end time:        ", $edate->datetime, "\n",

"duration:        ", fmtdur( $info->dur ), " h (", int($info->dur/60), "m)\n",
"creeping:        ", fmtdur( $info->dur_creep ), " h (",
	int(($info->dur_creep||0)/60), "m)\n",
"moving:          ", fmtdur( $info->dur_mov ), " h (",
	int(($info->dur_mov||0)/60), "m)\n",

"Temperature min: ", (int($info->temp_min||0) || '?'), " °C\n",
"Temperature max: ", (int($info->temp_max||0) || '?'), " °C\n",
"Temperature avg: ", (int($info->temp_avg||0) || '?'), " °C\n",

"Heartrate min:   ", (int($info->hr_min||0) || '?'), " 1/min\n",
"Heartrate avg:   ", (int($info->hr_avg||0) || '?'), " 1/min\n",
"Heartrate max:   ", (int($info->hr_max||0) || '?'), " 1/min at ",
	fmttime($info->hr_max_time), "\n",

"Cadence avg:     ", (int($info->cad_avg||0) || '?'), " 1/s\n",
"Cadence max:     ", (int($info->cad_max||0) || '?'), " 1/s at ",
	fmttime($info->cad_max_time), "\n",

"start elevation: ", (int($info->ele_start||0) ||'?'), " m\n",
"min elevation:   ", (int($info->ele_min||0) ||'?'), " m\n",
"max elevation:   ", (int($info->ele_max||0) ||'?'), " m at ",
	fmttime($info->ele_max_time), "\n",
"max slope:       ", sprintf( '%.1f', ($info->grad_max||0)), " % at ",
	fmttime($info->grad_max_time), "\n",
"total incline:   ", (int($info->incline||0) ||'?'), " m\n",

"total distance:  ", sprintf( '%.2f', ($info->dist||0) / 1000), " km\n",

"max speed:       ", sprintf( '%.2f', ($info->spd_max||0) * 3.6 ), " km/h at ",
	fmttime($info->spd_max_time), "\n",
"avg speed:       ", sprintf( '%.2f', ($info->spd_avg||0) * 3.6 ), " km/h\n",
"max accel:       ", sprintf( '%.2f', ($info->accel_max||0) ), " m/s² at ",
	fmttime($info->accel_max_time), "\n",

"total work:      ", sprintf( '%.2f', ($info->work||0) / 1000 ), " kJ\n",
"avg Power:       ", sprintf( '%.2f', ($info->pwr_avg||0) ), " W\n", # TODO
"max Power:       ", sprintf( '%.2f', ($info->pwr_max||0) ), " W at ", # TODO
	fmttime($info->pwr_max_time), "\n",

"Zavg Power:      ", sprintf( '%.2f', ($finfo->apwr||0) ), " W\n",
"norm. Power:     ", sprintf( '%.2f', ($finfo->npwr||0) ), " W (VI=",
	sprintf( '%.2f', ($finfo->vi||0) ), ")\n",
"TSS:             ", sprintf( '%.2f', ($finfo->tss||0) ), " (IF=",
	sprintf( '%.2f', ($finfo->if||0) ), ")\n",
"\n";

1;

sub fmtdur {
	my $s = shift;
	my $m = int($s / 60); $s %= 60;
	my $h = int($m / 60); $m %= 60;
	sprintf('%d:%02d:%02d', $h, $m, $s);
}

sub fmttime {
	my $t = shift;
	return '?' unless $t;
	my $date = DateTime->from_epoch(
		epoch		=> $t,
		time_zone	=> 'local',
	);
	$date->hms;
}
