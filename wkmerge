#!/usr/bin/perl

# convert srm to hrm
# ... merge gpx ele into hrm when available
# get summary info
# generate body


use strict;
use warnings;
use Getopt::Long;
use File::Temp qw/tempfile/;
use Workout;
use Workout::Athlete;

my $join;
my $recint;
my $otype;
my $delta = 0;
my @fields;
my $debug;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"debug!"	=> \$debug,
	"type=s"	=> \$otype,
	"recint|r=i"	=> \$recint,
	"join|j"	=> \$join,
	"fields|f=s"	=> \@fields,
	"delta|d=i"	=> \$delta,
	"help|h!"	=> \$wanthelp,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <srm-fname> <gpx-fname> <dst-fname>
prepare workout data for mailing it to the trainer

Options:
--debug             enable debuging output
--recint|-r=<int>   sampling interval (default=5)
--fields|-f=<n,n..> dump specified fields
--join              join blocks
--help              this cruft
EOF
	exit 0;
}

my $sfname = shift;
if( ! $sfname ){
	print STDERR "missing srm file\n";
	$needhelp++;
}

my $gfname = shift;
if( ! $gfname ){
	print STDERR "missing gpx file\n";
	$needhelp++;
}

my $ofname = shift;
if( ! $ofname ){
	print STDERR "missing output file\n";
	$needhelp++;
}

if( @fields ){
	@fields = split(/,/,join(',',@fields));
} else {
	#@fields ||= (qw( time dur dist spd cad hr work pwr));
	@fields = qw( ele );
}


if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}

$otype ||= lc( ($ofname =~ /\.([^.]+)$/)[0] );

my $ath = Workout::Athlete->new;

my $dst = Workout::file_new( { 
	debug	=> $debug,
	ftype	=> $otype,
	athlete	=> $ath,
} );

if( $recint ){
	$dst->recint( $recint );

} elsif( $recint = $dst->recint ){
	$debug && print STDERR "auto-resampling to $recint\n";

}

if( ! $join and $join = ! $dst->cap_block ){
	$debug && print STDERR "auto-join\n";
}



# read srm
my $srm = Workout::file_read( $sfname, {
	debug	=> $debug,
})->iterate;

$srm = Workout::filter('Timeshift', $srm, { 
	delta	=> $delta,
	debug	=> $debug,
});

$srm = Workout::filter('Join',  $srm,{
	recint	=> $recint,
	debug	=> $debug,
}) if $join;

$srm = Workout::filter('Resample', $srm, {
	recint	=> $recint,
	debug	=> $debug,
}) if $recint;
	

# read gpx
my $gpx = Workout::file_read( $gfname, {
	debug	=> $debug,
});

$gpx = Workout::filter('Join', $gpx, {
	debug	=> $debug,
});


# fill dst
my $merge = Workout::filter('Merge', $gpx, {
	master	=> $srm, 
	fields	=> \@fields,
	debug	=> $debug,
});
$dst->from( $merge );

# write dst
open( my $fh, '>', $ofname )
	or die "open '$ofname': $!";
$dst->write( $fh );
close( $fh );

1;
