#!/usr/bin/perl
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#


# example:
# convert srm to hrm
# ... merge gpx ele into hrm when available
# get summary info
# generate body

# TODO: pod


use strict;
use warnings;
use Getopt::Long;
use Workout;
use I18N::Langinfo qw(langinfo CODESET);

my $charset = langinfo(CODESET);
binmode STDIN, ":encoding($charset)";
binmode STDOUT, ":encoding($charset)";
binmode STDERR, ":encoding($charset)";


my $join;
my $skip;
my $recint;
my @itype;
my $otype;
my $delta = 0;
my @fields;
my $debug;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"debug!"	=> \$debug,
	"delta|d=i"	=> \$delta,
	"fields=s"	=> \@fields,
	"help!"		=> \$wanthelp,
	"itype=s"	=> \@itype,
	"join!"		=> \$join,
	"otype=s"	=> \$otype,
	"recint=f"	=> \$recint,
	"skip!"		=> \$skip,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <fname1> <fname2> <dst-fname>
prepare workout data for mailing it to the trainer

Options:
--itype=<a>,<b>     input file types
--delta=<d>         time difference of fname2
--fields=<n,n..>    fields to pick from fname2

--otype=<c>         output file type
--recint=<int>      output sampling interval (default=fname1's)
--join              join blocks
--skip              skip chunks where essential fields are missing

--debug             enable debuging output
--help              this cruft
EOF
	exit 0;
}

my $sfname = shift;
if( ! $sfname ){
	print STDERR "missing master file\n";
	$needhelp++;
}

my $gfname = shift;
if( ! $gfname ){
	print STDERR "missing secondary file\n";
	$needhelp++;
}

my $ofname = shift;
if( ! $ofname ){
	print STDERR "missing output file\n";
	$needhelp++;
}

@itype = split(/,/,join(',',@itype)) if @itype;

if( @fields ){
	@fields = split(/,/,join(',',@fields));
} else {
	#@fields ||= (qw( time dur dist spd cad hr work pwr));
	@fields = qw( ele );
}
foreach my $f ( @fields ){
	grep /^$f$/, @Workout::Chunk::core_fields
		and next;

	print STDERR "field not supported: $f\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}

$otype ||= Workout::file_type_name( $ofname );

my $dst = Workout::file_new( { 
	debug	=> $debug,
	ftype	=> $otype,
} );

if( ! $join and $join = ! $dst->cap_block ){
	$debug && print STDERR "auto-join\n";
}



# read wk1
my $wk1 = Workout::file_read( $sfname, {
	ftype	=> $itype[0],
	debug	=> $debug,
});
my $it1 = $wk1->iterate;

if( $recint ){
	$dst->recint( $recint );

} elsif( $dst->recint ){
	if( $wk1->recint_chunks ){
		$dst->recint( $wk1->recint_chunks );
		$recint = $dst->recint if $join;

	} else {
		$recint = $dst->recint;
		$debug && print STDERR "auto-resampling to $recint\n";
	}
}

$it1 = Workout::filter('Join',  $it1,{
	recint	=> $recint,
	debug	=> $debug,
}) if $join;

$it1 = Workout::filter('Resample', $it1, {
	recint	=> $recint,
	debug	=> $debug,
}) if $recint;
	

# read wk2
my $wk2 = Workout::file_read( $gfname, {
	ftype	=> $itype[1],
	debug	=> $debug,
});

my $it2 = Workout::filter('Join', $wk2, {
	debug	=> $debug,
});

$it2 = Workout::filter('Timeshift', $it2, {
	delta	=> $delta,
	debug	=> $debug,
}) if $delta;

my $iter = Workout::filter('Merge', $it2, {
	master	=> $it1, 
	fields	=> \@fields,
	debug	=> $debug,
});

$iter = Workout::filter( 'SkipUndef', $iter, {
	debug	=> $debug,
	fields	=> [ $dst->fields_essential ],
}) if $skip;


# fill dst
$dst->from( $iter );

# write dst
$dst->meta_prune_all;
$dst->write( $ofname );

1;
