#!/usr/bin/perl -w
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

# TODO: pod

use strict;
use warnings;
use Workout;
use Getopt::Long;


my $itype;

my $start;

my $delta;
my $note;

my $slope;
my $circum;
my $zeropos;
my $athletename;
my $recalc_power;

my $debug;
my $needhelp;
my $wanthelp;

if( ! GetOptions(
	'athlete=s'	=> \$athletename,
	'circum=i'	=> \$circum,
	'debug!'	=> \$debug,
	'delta|d=i'	=> \$delta,
	'help!'		=> \$wanthelp,
	'itype=s'	=> \$itype,
	'note=s'	=> \$note,
	'recalc-power!'	=> \$recalc_power,
	'slope=f'	=> \$slope,
	'start=s'	=> \$start,
	'zeropos=i'	=> \$zeropos,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <input file>
modify workout attributes

Options:
--start=<yyyy-mm-dd h:m:s> set new start time
--delta=<sec>       add delta to start time

--note=<n>          set note

--recalc-power      recalculate power based on new slope/zeropos
--slope=<x>         set slope (SRM)
--circum=<x>        set wheel circumference (SRM)
--zeropos=<x>       set zero offset (SRM)
--athlete=<name>    set athlete name (SRM)

--debug             enable debuging output
--help              this help
EOF
	exit 0;
}

if( @ARGV != 1 ){
	print STDERR "you need to specify a single input file\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

my $fname = shift;

my $src = Workout::file_read( $fname, {
	ftype	=> $itype,
	debug	=> $debug,
} );

if( $recalc_power && ($zeropos || $slope) ){
	my $old_slope = $src->slope;
	my $old_zeropos = $src->zeropos;

	$slope ||= $old_slope;
	$zeropos ||= $old_zeropos;

	my $ath = $src->can( 'athlete' )
		? $src->athlete
		: Workout::Athlete->new;

	my $dst = $src->new( {
		athlete	=> $ath,
		debug	=> $debug,
		recint	=> $src->recint,
	} );

	$dst->from( Workout::filter( 'PwrFix', $src, {
		old_slope	=> $old_slope,
		new_slope	=> $slope,
		old_zeropos	=> $old_zeropos,
		new_zeropos	=> $zeropos,
	}) );

	$src = $dst;
}

if( $start ){
	if( my( $year,$mon,$day, $hour, $min, $sec, $nsec ) =
		($start =~ /^(?:(\d\d\d\d)-(\d+)-(\d+)\s+)?(\d+):(\d+)(?::(\d+)(\.\d+)?)?$/ )){

		my $fdate = DateTime->from_epoch(
			time_zone	=> 'local',
			epoch		=> $src->time_start,
		);
		my $sdate = DateTime->new(
			year	=> $year || $fdate->year,
			month	=> $mon || $fdate->month,
			day	=> $day || $fdate->day,
			hour	=> $hour,
			minute	=> $min,
			second	=> $sec || $fdate->second,
			nanosecond => $nsec * 1000000000 || $fdate->nanosecond,
		);

		$delta = $sdate->hires_epoch - $src->time_start;

	} elsif( my( $stime ) = ($start =~ /^(\d+)$/ ) ){
		$delta = $stime - $src->time_start;

	} else {
		print STDERR "invalid start time\n";
		exit 1;
	}
}


$delta && $src->time_add_delta( $delta );
foreach my $attr ( qw( note slope circum zeropos athletename )){
	my $v = eval "\$$attr";
	next unless defined $v;
	next unless $src->can( $attr );
	$src->$attr( $v );
}

$src->write( "$fname.wkmodify" );
unlink $fname or die "unlink $fname failed: $!"; 
rename "$fname.wkmodify", $fname;
