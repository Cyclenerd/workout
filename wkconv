#!/usr/bin/perl -w
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

use strict;
use warnings;
use Workout;
use Workout::Athlete;
use Getopt::Long;

# TODO: pod

# TODO: optionally limit timespan to write
# TODO: optional filter Pwr calc
my $itype;
my $otype;
my $recint;
my $join;
my $skip;
my @fields;
my $opt_verbose;
my $debug;

my $needhelp;
my $wanthelp;

if( ! GetOptions(
	"debug!"	=> \$debug,
	"fields=s"	=> \@fields,
	"help!"		=> \$wanthelp,
	"itype=s"	=> \$itype,
	"join!"		=> \$join,
	"otype=s"	=> \$otype,
	"recint=i"	=> \$recint,
	"skip!"		=> \$skip,
	"verbose!"	=> \$opt_verbose,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <input file> <output file>
convert workout files between formats

Options:
--itype=<type>      input file type

--otype=<type>      input file type
--join              join blocks
--skip              skip chunks where essential fields are missing
--recint=<int>      sampling interval
--fields=<n,n..>    write only specified fields

--debug             enable debuging output
--help              this help
EOF
	exit 0;
}

if( @ARGV != 2 ){
	print STDERR "in- and output filename required\n";
	$needhelp++;
}

if( @fields ){
	@fields = split(/,/,join(',',@fields));
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}
	
my( $ifname, $ofname ) = @ARGV;

$otype ||= Workout::file_type_name( $ofname );


my $src = Workout::file_read( $ifname, { 
	ftype	=> $itype,
	debug	=> $debug,
} );

my $ath = $src->can( 'athlete' )
	? $src->athlete
	: Workout::Athlete->new;

my $dst = Workout::file_new( { 
	ftype	=> $otype,
	athlete	=> $ath,
	debug	=> $debug,
} );
if( my @unsup = $dst->fields_unsupported( @fields )){
	print STDERR "destination store doesn't support fields: @unsup\n";
	exit 1;
}

if( ! $join && ! $dst->cap_block ){
	$join++;
	$debug && print STDERR "auto-join\n";
}

if( $recint ){
	$dst->recint( $recint );

} elsif( $dst->recint ){
	if( $src->recint ){
		$dst->recint( $src->recint );
		$recint = $dst->recint if $join;

	} else {
		$recint = $dst->recint;
		$debug && print STDERR "auto-resampling to $recint\n";
	}
}

my $srci = $src->iterate;
my $iter = $srci;

my $skipi = $iter = Workout::filter( 'SkipUndef', $iter, {
	debug	=> $debug,
	fields	=> [ $dst->fields_essential ],
}) if $skip;


my $joini = $iter = Workout::filter( 'Join', $iter, {
	debug	=> $debug,
	recint	=> $recint,
} ) if $join;

my $res = $iter = Workout::filter('Resample', $iter, { 
	recint => $recint,
	debug	=> $debug,
} ) if $recint;

$dst->from( $iter );
$dst->fields_io( @fields ) if @fields;
$dst->write( $ofname );

if( $opt_verbose ){
	print "input=", $srci->cntin, "\n";
	print "joined=", $joini->cntout, "\n" if $join;
	print "resampled=", $res->cntout, "\n" if $recint;
}
