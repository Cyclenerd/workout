#!/usr/bin/perl -w

use strict;
use warnings;
use Data::Dumper;
use Workout::SRM;
use Workout::HRM;
use Getopt::Long;

my $itype;
my $otype;

my $needhelp;
my $wanthelp;

if( ! GetOptions(
	"help|h!"	=> \$wanthelp,
	"input|i=s"	=> \$itype,
	"output|o=s"	=> \$otype,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <input file> <output file>
convert workout files between formats

--help              this help
--input|-i=<type>   input file type
--output|-o=<type>  input file type

for now only conversion from .srm to .hrm is supported
EOF
	exit 0;
}

if( @ARGV != 2 ){
	print STDERR "in- and output filename required\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}
	
my( $ifile, $ofile ) = @ARGV;

# TODO: move calculation to modules
# TODO: move field definition to Workout::Base

open( I, $ifile )
	or die "failed to open input file";
open( O, ">$ofile" )
	or die "failed to open output file";

# TODO: use i-/otype
my $src = Workout::SRM->read( \*I );
my $dst = Workout::HRM->new( recint => 5 );
my $orecint = $dst->recint;

my @f_chunkv	= qw( hr cad spd pwr );
my @f_chunk	= qw( dur climb xdist dist grad work ); # TODO: grad??
my @f_trip	= qw( incline odo );
my @f_abs	= qw( time );
my @f_geo	= qw( ele lon lat );

my $a; # aggregated entry
my $l; # last output entry
my @data = $src->chunks;
my $icnt = 0;
my $ocnt = 0;
$|++;

while( @data ){

	# TODO: fill in data gaps

	# aggregate data
	while( ! $a || ! exists $a->{dur} || $a->{dur} < $orecint ){
		my $r = shift @data; # read entry
		$a->{dur} ||= 0;

		my $s = { %$a };
		#print "reading chunk ", ++$icnt, "\n";
		#print "-";

		# TODO: calc "necessary" data for $r, and use only this for $a

		my $ndur = $a->{dur} + $r->{dur};
		foreach my $f (@f_chunkv){
			if( exists $r->{$f} ){
				$a->{$f} = ( ($a->{$f}||0) * $a->{dur} 
					+ $r->{$f} * $r->{dur}) / $ndur;
			} else {
				delete $a->{$f};
			}
		}

		foreach my $f (@f_chunk){
			if( exists $r->{$f} ){
				$a->{$f} += $r->{$f};
			} else {
				delete $a->{$f};
			}
		}

		foreach my $f (@f_trip, @f_abs, @f_geo ){
			if( exists $r->{$f} ){
				$a->{$f} = $r->{$f};
			} else {
				delete $a->{$f};
			}
		}

		#print "aggregated: ", Data::Dumper->Dump( [$s, $r, $a],[qw(s r a)] );
	}

	# split data
	while( $a->{dur} >= $orecint ){
		my $o; # new outuput entry
		#print "writing chunk ", ++$ocnt, "\n";
		#print "+";

		my $s = { %$a };

		foreach my $f (@f_chunkv){
			next unless exists $a->{$f};
			$o->{$f} = $a->{$f};
		}

		my $opart = $orecint / $a->{dur};
		foreach my $f (@f_chunk){
			next unless exists $a->{$f};
			$o->{$f} = $opart * $a->{$f};
			$a->{$f} -= $o->{$f};
		}

		$l->{time} ||= $a->{time} - $a->{dur};
		
		foreach my $f (@f_trip, @f_abs){
			next unless exists $a->{$f};
			$l->{$f} ||= $a->{$f};
			my $d = $a->{$f} - $l->{$f};
			$o->{$f} = $l->{$f} + $opart * $d;
		}

		# TODO: @f_geo

		#print "split: ", Data::Dumper->Dump( [$l, $s, $o, $a], [qw(l s o a)] );
		$dst->chunk_add( $o );
		$l = $o;
	}
}

$dst->write( \*O );


