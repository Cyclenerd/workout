#!/usr/bin/perl -w
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

use strict;
use warnings;
use Workout;
use Workout::Athlete;
use Getopt::Long;

# TODO: pod

# TODO: convert + concatenate multiple workouts

# TODO: optional filter Smooth 
# TODO: optional filter Pwr calc
my $itype;
my $otype;
my $recint;
my $join;
my $opt_verbose;
my $debug;

my $needhelp;
my $wanthelp;

if( ! GetOptions(
	"help|h!"	=> \$wanthelp,
	"input|i=s"	=> \$itype,
	"output|o=s"	=> \$otype,
	"recint|r=i"	=> \$recint,
	"join|j"	=> \$join,
	"verbose|v!"	=> \$opt_verbose,
	"debug!"	=> \$debug,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <input file> <output file>
convert workout files between formats

--help              this help
--input|-i=<type>   input file type
--output|-o=<type>  input file type
--join              join blocks
--recint|-r=<int>   sampling interval
--debug             enable debuging output

for now only conversion from .srm to .hrm is supported
EOF
	exit 0;
}

if( @ARGV != 2 ){
	print STDERR "in- and output filename required\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}
	
my( $ifile, $ofile ) = @ARGV;

$itype ||= lc( ($ifile =~ /\.([^.]+)$/)[0] );
$otype ||= lc( ($ofile =~ /\.([^.]+)$/)[0] );

my $ath = Workout::Athlete->new;

my $src = Workout::file_read( $ifile, { 
	ftype	=> $itype,
	debug	=> $debug,
} );
my $dst = Workout::file_new( { 
	ftype	=> $otype,
	athlete	=> $ath,
	debug	=> $debug,
} );

if( $recint ){
	$dst->recint( $recint );

} elsif( $recint = $dst->recint ){
	$debug && print STDERR "auto-resampling to $recint\n";

}

if( ! $join && ! $dst->cap_block ){
	$join++;
	$debug && print STDERR "auto-join\n";
}

my $srci = $src->iterate;
my $iter = $srci;

my $joini = $iter = Workout::filter( 'Join', $iter, {
	debug	=> $debug,
	recint	=> $recint,
} ) if $join;

my $res = $iter = Workout::filter('Resample', $iter, { 
	recint => $recint,
	debug	=> $debug,
} ) if $recint;

$dst->from( $iter );
$dst->write( $ofile );

if( $opt_verbose ){
	print "input=", $srci->cntin, "\n";
	print "joined=", $joini->cntout, "\n" if $join;
	print "resampled=", $res->cntout, "\n" if $recint;
}
