#!/usr/bin/perl
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

# interactively determine time delta between multiple recordings for one
# workout

# TODO: pod

# TODO: update file to use selected delta

use strict;
use warnings;
use Getopt::Long;
use Workout;
use Workout::GtkChartDelta;

use Gtk2;
use Glib qw/ TRUE FALSE /;

my $delta = 0;
my $recint;
my $field = 'spd';
my $opt_save;
my $opt_gui;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"help|h!"	=> \$wanthelp,
	"recint|r=i"	=> \$recint,
	"delta|d=i"	=> \$delta,
	"gui|g!"	=> \$opt_gui,
	"field|f=s"	=> \$field,
	"save|s!"	=> \$opt_save,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <fname1> [<fname2>]
interactively determine time delta between multiple recordings for one workout

Options:
--delta|-d=<d>      initial delta for first file
--save|-s           save delta to first file

--gui|-g            interactively determine delta between two files
--recint|-r=<s>     smoothen input data (speeds up gui, too)
--field|-f=<f>      field to plot

--help              this cruft
EOF
	exit 0;
}
$opt_gui = exists $ENV{DISPLAY} unless defined $opt_gui;

if( $field !~ /^(?:ele|spd|cad|hr|pwr)$/ ){
	print STDERR "invalid field: $field\n";
	$needhelp++;
}

my $f1 = shift;
if( ! $f1 ){
	print STDERR "missing filename\n";
	$needhelp++;
}

my $f2;
if( $opt_gui ){
	$f2 = shift;
	if( ! $f2 ){
		print STDERR "missing second filename\n";
		$needhelp++;
	}
}

if( @ARGV ){
	print STDERR "too many files\n";
	$needhelp++;
}


if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}


my $wk1 = get_wk( $f1 );

my $gui_canceled;
if( $opt_gui ) {
	my $wk2 = get_wk( $f2 );
	Gtk2->init;
	&show_chart( $wk1, $wk2 );
}

if( $gui_canceled ){
	exit 1;
}

print "$delta\n";

if( $delta && $opt_save ){
	$wk1->time_add_delta( $delta );
	$wk1->write( "$f1.wkdelta" );
	unlink $f1 or die "unlink $f1 failed: $!";
	rename "$f1.wkdelta", $f1;
}


sub get_wk {
	my( $fname ) = @_;

	my $wk = Workout::file_read( $fname );
	$wk = Workout::filter( 'Resample', $wk, { recint => $recint }) if $recint;
	$wk;
}


# TODO: move this to seperate package
sub show_chart {
	

	my $win = Gtk2::Window->new;
	$win->signal_connect( 'destroy' => sub { Gtk2->main_quit } );
	$win->signal_connect( 'size-request' => sub {
		my( $self, $req ) = @_;

		$req->width( 600 );
		$req->height( 300 );

		1;
	} );



	my $box = Gtk2::VBox->new;
	$win->add( $box );

	# graph
	my $graph = Workout::GtkChartDelta->new(
#		field	=> $field, # TODO
	);

	foreach my $wk ( @_ ){
		$graph->add_workout( $wk );
	}
	$box->pack_start( $graph, 1, 1, 0 );



	my $hbox = Gtk2::HBox->new;
	$box->pack_start( $hbox, 0, 0, 0 );

	# TODO: zoom controls

	# delta adjustment
	my $label = Gtk2::Label->new( 'delta:' );
	$hbox->pack_start( $label, 0, 0, 0 );

	my $dadjust = Gtk2::Adjustment->new(
		$delta, -2000000000, 2000000000,
		1, 60, 3600 );
	$graph->set_delta( 0, $delta ) if $delta;

	my $spin = Gtk2::SpinButton->new( $dadjust, 1, 0 );
	$spin->set_activates_default( 1 );
	$hbox->pack_start( $spin, 0, 0, 0 );

	my $set = Gtk2::Button->new( 'show' );
	$set->signal_connect( clicked => sub {
		my( $button, $window ) = @_;
		$graph->set_delta( 0, $dadjust->get_value );
	}, $win );
	$hbox->pack_start( $set, 0, 0, 0 );
	$set->can_default( 1 );
	$win->set_default( $set );


	# Ok 
	my $but_ok = Gtk2::Button->new( 'Ok' );
	$but_ok->signal_connect( clicked => sub {
		my( $button, $window ) = @_;
		$window->destroy;
	}, $win );
	$hbox->pack_start( $but_ok, 1, 0, 0 );


	# Cancel 
	my $but_cancel = Gtk2::Button->new( 'Cancel' );
	$but_cancel->signal_connect( clicked => sub {
		my( $button, $window ) = @_;
		$gui_canceled++;
		$window->destroy;
	}, $win );
	$hbox->pack_start( $but_cancel, 1, 0, 0 );



	$win->show_all;
	Gtk2->main;

	$delta = $dadjust->get_value;
}

