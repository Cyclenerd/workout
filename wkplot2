#!/bin/perl -w

use strict;
use Gtk2 '-init';
use Cairo;
use Data::Dumper;


package WkPlot::Graph;
use base 'Gtk2::DrawingArea';

sub new {
	my $class = shift;
	my $self = $class->SUPER::new( @_ );

	$self->{border} = 10;
	$self->signal_connect( 'expose-event', \&expose );
	$self->signal_connect( 'size-request', \&get_size_request );
	return $self;
}

sub get_size_request {
	my( $self, $req ) = @_;

	$req->width( 100 + 2*$self->{border});
	$req->height( 50 + 2*$self->{border});

	1;
}

sub expose {
	my( $self, $event ) = @_;

	my $a = $event->area;
	#print join(" ", $a->values),"\n";
	my $cr = Gtk2::Gdk::Cairo::Context->create( $self->window );

	# set bbox
	$cr->rectangle( $a->values );
	$cr->clip;
	
	# border
	$cr->rectangle( $a->values );
	$cr->stroke;

	my( $b, $w, $h ) = ( $self->{border}, 100, 100 );

	$cr->translate( $a->x+$b, $a->y+$b );
	$cr->scale( ($a->width - 2*$b)/ $w, ($a->height-2*$b) / $h );

	$cr->rectangle( 0,0,$w, $h );
	$cr->stroke;

	# draw path
	$cr->move_to( 0, 0 );
	$cr->line_to( $w/2,  $h/2 );
	$cr->line_to( $w, 0 );
	$cr->move_to( $w/2, 0 );
	$cr->line_to( $w/2,  $h );
	foreach my $tic ( 10, 20, 25, 30 ){
		$cr->move_to( 0, $tic ); $cr->line_to( $w/2, $tic );
	}
	$cr->stroke;

	# text
	my $pl = Gtk2::Pango::Cairo::create_layout( $cr );
	Gtk2::Pango::Cairo::update_layout( $cr, $pl );

	$pl->set_text( "oo" );
	my( $x, $y ) = $pl->get_pixel_size;
	#print "$x $y\n";
	$cr->move_to( ($w - $x)/2,  ($h - $y)/2 );
	Gtk2::Pango::Cairo::show_layout( $cr, $pl );


	1;
}


package WkPlot;
use base 'Gtk2::Window';

sub new {
	my $class = shift;
	my $self = $class->SUPER::new( @_ );


	my $box = Gtk2::VBox->new;
	$self->add( $box );

	my $graph = WkPlot::Graph->new;
	$box->add( $graph );

	my $quit = Gtk2::Button->new( 'Quit' );
	$quit->signal_connect( clicked => sub {
		my( $button, $window ) = @_;
		$window->destroy;

	}, $self );
	$box->add( $quit );



	return $self;
}


package MAIN;

=pod

use Workout;
use Workout::Athlete;
use Workout::Calc;
use Workout::Store::Memory;

my $itype;
my $fname = shift;

my $src = Workout::file_read( $fname, { ftype => $itype } );
my $smth = Workout::filter( 'Smooth', $src, { });
my $mem = Workout::Store::Memory->new;
$mem->from( $smth );

=cut

my $plot = WkPlot->new;
$plot->signal_connect( 'destroy' => sub { Gtk2->main_quit } );
$plot->show_all;
Gtk2->main;
